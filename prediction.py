# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bzk_jFKLuBzHxAt22ptP4HvgZPe54E2m
"""

import streamlit as st
import pandas as pd
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load the movie dataset
movies_df = pd.read_csv('/content/drive/MyDrive/movies.csv')

# Sidebar options
options = ['Movie Revenue Prediction', 'Movie Rating Prediction', 'Casting Choices', 'Similar Movies']
option = st.sidebar.selectbox('Select an option', options)

# Movie Revenue Prediction
if option == 'Movie Revenue Prediction':
    st.title('Movie Revenue Prediction')

    # Check if the DataFrame is empty or the selected features are missing
    if movies_df.empty or 'Budget' not in movies_df.columns or 'Popularity' not in movies_df.columns or 'Runtime' not in movies_df.columns:
        st.write('Error: The movie dataset is empty or missing the required features.')
    else:
        # Select features
        selected_features = st.multiselect('Select features for prediction', ('Budget', 'Popularity', 'Runtime'))

        # Check if at least one feature is selected
        if len(selected_features) == 0:
            st.write('Error: Please select at least one feature for prediction.')
        else:
            # Prepare the data
            X = movies_df[selected_features]
            y = movies_df['Revenue']

            # Check if the data contains NaN values
            if X.isnull().values.any() or y.isnull().values.any():
                st.write('Error: The selected features or target variable contain missing values.')
            else:
                # Train the model
                model = LinearRegression()
                model.fit(X, y)

                # User input for prediction
                st.subheader('Enter the movie details:')
                budget = st.number_input('Budget', min_value=0)
                popularity = st.number_input('Popularity', min_value=0)
                runtime = st.number_input('Runtime', min_value=0)

                # Predict the revenue
                revenue_prediction = model.predict([[budget, popularity, runtime]])

                # Display the prediction
                st.subheader('Revenue Prediction:')
                st.write(f'Estimated revenue: ${revenue_prediction[0]:.2f}')

# Movie Rating Prediction
elif option == 'Movie Rating Prediction':
    st.title('Movie Rating Prediction')

    # Select features
    selected_features = st.multiselect('Select features for prediction', ('Budget', 'Popularity', 'Runtime'))

    # Rest of the code...

    # Prepare the data
    X = movies_df[selected_features]
    y = movies_df['Rating']

    # Train the model
    model = RandomForestRegressor()
    model.fit(X, y)

    # User input for prediction
    st.subheader('Enter the movie details:')
    budget = st.number_input('Budget', min_value=0)
    popularity = st.number_input('Popularity', min_value=0)
    runtime = st.number_input('Runtime', min_value=0)

    # Predict the rating
    rating_prediction = model.predict([[budget, popularity, runtime]])

    # Display the prediction
    st.subheader('Rating Prediction:')
    st.write(f'Estimated rating: {rating_prediction[0]:.2f}')

# Casting Choices
elif option == 'Casting Choices':
    st.title('Casting Choices')

    # Select a movie
    selected_movie = st.selectbox('Select a movie', movies_df['Title'])

    # Get the cast for the selected movie
    cast = movies_df.loc[movies_df['Title'] == selected_movie, 'Cast'].values[0]

    # Display the cast
    st.subheader('Cast:')
    st.write(cast)

# Similar Movies
elif option == 'Similar Movies':
    st.title('Similar Movies')

    # Select a movie
    selected_movie = st.selectbox('Select a movie', movies_df['Title'])

    # Get the movie's overview
    movie_overview = movies_df.loc[movies_df['Title'] == selected_movie, 'Overview'].values[0]

    # Compute similarity scores
    tfidf = TfidfVectorizer(stop_words='english')
    tfidf_matrix = tfidf.fit_transform(movies_df['Overview'].values.astype('U'))
    similarity_scores = cosine_similarity(tfidf_matrix, tfidf.transform([movie_overview]))

    # Get top 5 similar movies
    similar_movies_indices = similarity_scores.flatten().argsort()[:-6:-1]
    similar_movies = movies_df.iloc[similar_movies_indices]

    # Display the similar movies
    st.subheader('Similar Movies:')
    st.dataframe(similar_movies)

# Display the movie dataset
st.subheader('Movie Dataset')
st.dataframe(movies_df)